--6일차(5일차 이어서...)

--=================== JOIN 파트 ===================
SELECT * FROM EMPLOYEES;   --107rows --11columns
SELECT * FROM DEPARTMENTS; --27rows  --4columns

--카티션곱
SELECT COUNT(*)
FROM EMPLOYEES, DEPARTMENTS; --2889 => 107*27의 값

--동등조인 ex1)
SELECT DEPARTMENT_ID, JOBS.JOB_ID, JOB_HISTORY.JOB_ID
FROM JOBS, JOB_HISTORY
WHERE JOBS.JOB_ID = JOB_HISTORY.JOB_ID;


--동등조인 ex2)
SELECT  J.JOB_ID, J.MIN_SALARY, J.MAX_SALARY, H.DEPARTMENT_ID
FROM JOBS J, JOB_HISTORY H
WHERE J.JOB_ID = H.JOB_ID AND J.JOB_ID = 'IT_PROG';


--비동등 조인 : 테이블의 동일한 컬럼없이 다른 조건으로 조인하는 방법
SELECT *
FROM EMPLOYEES E, JOBS J
WHERE E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY;


--동등조인, 아래의 외부조인과 비교:
SELECT *
FROM JOBS J, JOB_HISTORY H
WHERE J.JOB_ID = H.JOB_ID;
--외부조인(OUTER JOIN) : 조인하는 테이블에서 조인조건을 만족하지 않는 필드출력
--동등 조건을 만족하지 못하고 누락한 행을 출력할때 사용:
SELECT *
FROM JOBS J, JOB_HISTORY H
WHERE J.JOB_ID = H.JOB_ID(+);


--동등조인:
SELECT *
FROM COUNTRIES C, LOCATIONS L
WHERE C.COUNTRY_ID = L.COUNTRY_ID;
--외부조인:
SELECT *
FROM COUNTRIES C, LOCATIONS L
WHERE C.COUNTRY_ID = L.COUNTRY_ID(+);


--TEST 1: COUNTRIES테이블과 LOCATIONS테이블을 COUNTRY_ID를 기준으로 조인하여 COUNTRY_NAME, STATE_PROVINCE, STREET_ADDRESS를 조회
SELECT C.COUNTRY_NAME, L.STATE_PROVINCE, L.STREET_ADDRESS
FROM COUNTRIES C, LOCATIONS L
WHERE C.COUNTRY_ID = L.COUNTRY_ID;


--=================== 서브쿼리 파트 ===================
--입사일 06/01/03 보다 입사일이 느리지만 SALARY는 9000이 넘는 데이터만 추출:
SELECT *
FROM EMPLOYEES
WHERE SALARY >= (
    SELECT SALARY
    FROM EMPLOYEES
    WHERE HIRE_DATE = '06/01/03'
);


--'Allan'의 입사일보다 입사일이 빠른 데이터만 추출:
SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE < (
    SELECT HIRE_DATE
    FROM EMPLOYEES
    WHERE FIRST_NAME = 'Allan'
);


--부서별 SALARY급여가 가장 많은 데이터만 추출:
SELECT *
FROM EMPLOYEES
WHERE SALARY IN (
    SELECT MAX(SALARY)
    FROM EMPLOYEES
    GROUP BY DEPARTMENT_ID
);

