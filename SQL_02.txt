--2일차
--BETWEEN 연산자(BETWEEN AND) : 두 값의 범위에 해당하는 데이터만 출력할 때 사용되는 확장 연산자
SELECT * 
FROM EMPLOYEES
WHERE EMPLOYEE_ID >= 120 AND EMPLOYEE_ID < 130;

--위의 결과값과 같음:
SELECT * 
FROM EMPLOYEES
WHERE EMPLOYEE_ID BETWEEN 120 AND 130;


SELECT * 
FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 12000;


--IN 연산자 : 여러 개의 값을 지정하여 일치하는 데이터만 출력
SELECT * 
FROM EMPLOYEES
WHERE FIRST_NAME = 'Steven' OR FIRST_NAME = 'John' OR FIRST_NAME = 'Peter';

--위의 결과값과 같음 (IN 사용):
SELECT * 
FROM EMPLOYEES
WHERE FIRST_NAME IN ('Steven', 'John', 'Peter');


SELECT * 
FROM COUNTRIES
WHERE COUNTRY_ID IN ('US', 'IL', 'SG');


--IS NULL : 속성의 값이 NULL값인지를 비교하여 데이터 조회
SELECT *
FROM LOCATIONS
WHERE STATE_PROVINCE IS NULL;

--IS NOT NULL : 속성의 값이 NULL값이 아닌 데이터 조회
SELECT *
FROM LOCATIONS
WHERE STATE_PROVINCE IS NOT NULL;


--LIKE 연산자 : 문자열에서 부분적으로 일치하는 것만 출력
--% : 0개 이상의 문자
--_ : 1개의 문자
--CITY 중 South로 시작하는 레코드만 추출:
SELECT *
FROM LOCATIONS
WHERE CITY LIKE 'South%';

--STREET_ADDRESS열에서 중간 글자가 Vi인 레코드 추출
SELECT *
FROM LOCATIONS
WHERE STREET_ADDRESS LIKE '%Vi%';


--_4개 입력 : South글자로 시작하고 뒷자리는 4자까지 오는것 추출
SELECT *
FROM LOCATIONS
WHERE CITY LIKE 'South____';


--TEST 1: jobs 테이블에서 jobs_title 기준으로 정렬하여 직업 조회
SELECT *
FROM JOBS
ORDER BY JOB_TITLE;


--TEST 2: countries 테이블에서 country_name 기준 내림차순으로 정렬하여 조회
SELECT *
FROM COUNTRIES
ORDER BY COUNTRY_NAME DESC;


--TEST 3: employees 테이블에서 salary 가 10000에서 12000 사이인 직원 조회
SELECT *
FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 12000;


--TEST 4: employees 테이블에서 job_id가 'IT_PROG'와 'ST_MAN' 인 직원 조회
SELECT *
FROM EMPLOYEES
WHERE JOB_ID IN ('IT_PROG', 'ST_MAN');


--TEST 5: employees 테이블에서 manager_id가 NULL인 직원 조회
SELECT *
FROM EMPLOYEES
WHERE manager_id IS NULL;


--TEST 6: departments 테이블에서 manager_id가 NULL이 아닌 부서 조회
SELECT *
FROM DEPARTMENTS
WHERE MANAGER_ID IS NOT NULL;


--TEST 7: employees 테이블에서 job_id가 'AD'로 시작하는 직원 조회
SELECT *
FROM EMPLOYEES
WHERE JOB_ID LIKE 'AD%';


--TEST 8: employees 테이블에서 first_name 에서 'ni'를 포함하는 직원 조회
SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%ni%';


--=================== 집합 파트 ===================
--집합 연산자 UNION (합집합: 중복제외)
--1번:
SELECT EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60;


--2번:
SELECT EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;


--1번과 2번을 UNION:
SELECT EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60
UNION
SELECT EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;


--3번
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE EMPLOYEE_ID <= 160;


--4번
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE EMPLOYEE_ID >= 140;


--3번과 4번을 UNION ALL(중복 제외):
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE EMPLOYEE_ID <= 160
UNION ALL
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE EMPLOYEE_ID >= 140;


--5번
SELECT *
FROM JOB_HISTORY
WHERE DEPARTMENT_ID >= 80;


--6번
SELECT *
FROM JOB_HISTORY
WHERE DEPARTMENT_ID <= 110;


--5번과 6번을 UNION:
SELECT *
FROM JOB_HISTORY
WHERE DEPARTMENT_ID >= 80
UNION
SELECT *
FROM JOB_HISTORY
WHERE DEPARTMENT_ID <= 110;


--5번과 6번을 UNION ALL(중복허용):
SELECT *
FROM JOB_HISTORY
WHERE DEPARTMENT_ID >= 80
UNION ALL
SELECT *
FROM JOB_HISTORY
WHERE DEPARTMENT_ID <= 110;